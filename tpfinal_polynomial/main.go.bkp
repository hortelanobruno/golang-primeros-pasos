package main

import (
	"fmt"
	"log"
	"strconv"
)

type polynomial struct {
	coef   []int
	degree int
}

func (p *polynomial) reduce() {
	p.degree = -1
	for i := len(p.coef) - 1; i >= 0; i-- {
		if p.coef[i] != 0 {
			p.degree = i
			return
		}
	}
}

func (p *polynomial) init(a int, b int) {
	if b < 0 {
		log.Fatalln("exponent cannot be negative: " + strconv.Itoa(b))
	}
	p.coef = make([]int, b+1)
	p.coef[b] = a
	b.reduce()
}

// y = 2x+8 =>
 y2 = 3x^2 + 25


 y + y2 = 3x^2 + 2x + 33

 y3 = 4x^5 + 3x^3 + 2

 y3 = 4x^5 + 3x^3 + x^4 + 3x^4 + 2

 degree =5
 coef [4,0,3,0,0,-2]


	degree 2
	coef [1,2,8]

-100
..
.
.		2 =>  1*2^2 + 2 * 2 ^1 + 8
.
+100




func (p *polynomial) plus(pIn polynomial) polynomial {
	var pOut = polynomial{}
	pOut.init(0, Max(p.degree, pIn.degree))
	for i := 0; i <= p.degree; i++ {
		pOut.coef[i] += p.coef[i]
	}
	for i := 0; i <= pIn.degree; i++ {
		pOut.coef[i] += pIn.coef[i]
	}
	pOut.reduce()
	return pOut
}

func (p *polynomial) minus(pIn polynomial) polynomial {
	var pOut = polynomial{}
	pOut.init(0, Max(p.degree, pIn.degree))
	for i := 0; i <= p.degree; i++ {
		pOut.coef[i] += p.coef[i]
	}
	for i := 0; i <= pIn.degree; i++ {
		pOut.coef[i] -= pIn.coef[i]
	}
	pOut.reduce()
	return pOut
}

func (p *polynomial) times(pIn polynomial) polynomial {
	var pOut = polynomial{}
	pOut.init(0, (p.degree + pIn.degree))
	for i := 0; i <= p.degree; i++ {
		for j := 0; j <= pIn.degree; j++ {
			pOut.coef[i+j] += p.coef[i] * pIn.coef[i]
		}
	}
	pOut.reduce()
	return pOut
}

func (p *polynomial) compose(pIn polynomial) polynomial {
	var pOut = polynomial{}
	pOut.init(0, 0)
	for i := p.degree; i >= 0; i-- {
		var pOut2 = polynomial{}
		pOut2.init(p.coef[i], 0)
		pOut = pOut2.plus(pIn.times(pOut))
	}
	return pOut
}

func (p *polynomial) differentiate() polynomial {
	if p.degree == 0 {
		var pOut = polynomial{}
		pOut.init(0, 0)
		return pOut
	}
	var pOut = polynomial{}
	pOut.init(0, p.degree-1)
	pOut.degree = p.degree - 1
	for i := 0; i < p.degree; i++ {
		pOut.coef[i] = (i + 1) * p.coef[i+1]
	}
	return pOut
}

func (p *polynomial) evaluate(x int) int {
	r := 0
	for i := p.degree; i >= 0; i-- {
		r = p.coef[i] + (x * r)
	}
	return r
}

func (p *polynomial) print() string {
	if p.degree == -1 {
		return "0"
	} else if p.degree == 0 {
		return strconv.Itoa(p.coef[0])
	} else if p.degree == 1 {
		return strconv.Itoa(p.coef[1]) + "x + " + strconv.Itoa(p.coef[0])
	}
	s := strconv.Itoa(p.coef[p.degree]) + "x^" + strconv.Itoa(p.degree)
	for i := p.degree; i >= 0; i-- {
		if p.coef[i] == 0 {
			continue
		} else if p.coef[i] > 0 {
			s = s + " + " + strconv.Itoa(p.coef[i])
		} else if p.coef[i] < 0 {
			s = s + " - " + strconv.Itoa(p.coef[i])
		}
		if i == 1 {
			s = s + "x"
		} else if i > 1 {
			s = s + "x^" + strconv.Itoa(i)
		}
	}
	return s
}

func Max(x, y int) int {
	if x < y {
		return y
	}
	return x
}

func main() {
	fmt.Println("Hello worlds!")

}
